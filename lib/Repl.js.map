{"version":3,"sources":["Repl.coffee"],"names":[],"mappings":"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","file":"Repl.js","sourcesContent":["###\n© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\nfs              = require 'fs'\npath            = require 'path'\n#vm              = require 'vm'\nNodeRepl        = require 'repl'\n\n{\n  compile,\n  evaluate,\n  render,\n  stringify\n}               = require './GoateeScript'\n\nExpression      = require './Expression'\n\n{\n  isArray\n}               = require './Utility'\n\n###\n# # REPL …\n# -------------\n#\n# … **R**ead → **E**xecute → **P**rint → **L**oop !\n#\n####\n\n###*\n#  -------------\n# @class Repl\n# @namespace GoateeScript\n###\nclass Repl\n\n  ###*\n  #  -------------\n  # Creates a nice error message like, following the \"standard\" format\n  # <filename>:<line>:<col>: <message> plus the line with the error and a marker\n  # showing where the error is.\n  #\n  # @function _prettyErrorMessage\n  # @param {Boolean|Array|Error} [error]\n  # @param {String}              [filename]\n  # @param {Number}              [code]\n  # @param {Boolean|Function}    [colorize]\n  # @private\n  ###\n  _prettyErrorMessage = (error, filename, code, colorize) ->\n\n    if not error? or error is false or ( isArray(error) and error.length is 0 )\n      return null\n\n    if isArray error\n      message = []\n      for e in error\n        message.push _prettyErrorMessage(e, filename, code, colorize)\n      return message.join(\"\\n——\\n\")\n\n    # Prefer original source file information stored in the error if present.\n    filename = error.filename or filename\n    code     = error.code or code\n    message  = error.message\n\n    if colorize?\n      if colorize is yes\n        colorize = (str) -> \"\\x1B[1;31m#{str}\\x1B[0m\"\n      message  = colorize message\n\n    \"\"\"\n    #{filename}: #{message}\n    \"\"\"\n\n  ###*\n  #  -------------\n  # @function _addMultilineHandler\n  # @param {Repl} [repl]\n  # @private\n  ###\n  _addMultilineHandler = (repl) ->\n    {rli, inputStream, outputStream} = repl\n\n    # Node 0.11.12 changed API, prompt is now _prompt.\n    origPrompt = repl._prompt ? repl.prompt\n\n    multiline =\n      enabled: off\n      initialPrompt: origPrompt.replace(/^[^> ]*/, (x) -> x.replace(/./g, '-'))\n      prompt: origPrompt.replace(/^[^> ]*>?/, (x) -> x.replace(/./g, '.'))\n      buffer: ''\n\n    # Proxy node's line listener\n    nodeLineListener = rli.listeners('line')[0]\n    rli.removeListener 'line', nodeLineListener\n    rli.on 'line', (cmd) ->\n      if multiline.enabled\n        multiline.buffer += \"#{cmd}\\n\"\n        rli.setPrompt multiline.prompt\n        rli.prompt true\n      else\n        nodeLineListener cmd\n      return\n\n    # Handle Ctrl-v\n    inputStream.on 'keypress', (char, key) ->\n      return unless key and key.ctrl and not key.meta and not key.shift and key.name is 'v'\n      if multiline.enabled\n        # allow arbitrarily switching between modes\n        # any time before multiple lines are entered\n        unless multiline.buffer.match /\\n/\n          multiline.enabled = not multiline.enabled\n          rli.setPrompt origPrompt\n          rli.prompt true\n          return\n        # no-op unless the current line is empty\n        return if rli.line? and not rli.line.match /^\\s*$/\n        # eval, print, loop\n        multiline.enabled = not multiline.enabled\n        rli.line = ''\n        rli.cursor = 0\n        rli.output.cursorTo 0\n        rli.output.clearLine 1\n        # XXX: multiline hack\n        multiline.buffer = multiline.buffer.replace /\\n/g, '\\uFF00'\n        rli.emit 'line', multiline.buffer\n        multiline.buffer = ''\n      else\n        multiline.enabled = not multiline.enabled\n        rli.setPrompt multiline.initialPrompt\n        rli.prompt true\n      return\n\n  ###*\n  #  -------------\n  # Store and load command history from a file\n  #\n  # @function _addHistory\n  # @param {Repl}    [repl]\n  # @param {String}  [filename]\n  # @param {Number}  [maxSize]\n  # @private\n  ###\n  _addHistory = (repl, filename, maxSize) ->\n    lastLine = null\n    try\n      # Get file info and at most maxSize of command history\n      stat = fs.statSync filename\n      size = Math.min maxSize, stat.size\n      # Read last `size` bytes from the file\n      readFd = fs.openSync filename, 'r'\n      buffer = new Buffer(size)\n      fs.readSync readFd, buffer, 0, size, stat.size - size\n      # Set the history on the interpreter\n      repl.rli.history = buffer.toString().split('\\n').reverse()\n      # If the history file was truncated we\n      # should pop off a potential partial line\n      repl.rli.history.pop() if stat.size > maxSize\n      # Shift off the final blank newline\n      repl.rli.history.shift() if repl.rli.history[0] is ''\n      repl.rli.historyIndex = -1\n      lastLine = repl.rli.history[0]\n\n    fd = fs.openSync filename, 'a'\n\n    repl.rli.addListener 'line', (code) ->\n      if code and code.length and code isnt '.history' and lastLine isnt code\n        # Save the latest command in the file\n        fs.write fd, \"#{code}\\n\"\n        lastLine = code\n\n    repl.rli.on 'exit', -> fs.close fd\n\n    # Add a command to show the history stack\n    repl.commands['.history'] =\n      help: 'Show command history'\n      action: ->\n        repl.outputStream.write \"#{repl.rli.history[..].reverse().join '\\n'}\\n\"\n        repl.displayPrompt()\n\n  ###*\n  #  -------------\n  # @property defaults\n  # @type {Object}\n  ###\n  Repl.defaults = _options =\n    command: {}\n    context: {}\n    variables: {}\n    ###*\n    #  -------------\n    # @function defaults.eval\n    # @param {String}      input\n    # @param {Object}      [context]\n    # @param {Number}      [code]\n    # @param {Function}    [callback]\n    ###\n    eval: (input, context, filename, callback) ->\n      # XXX: multiline hack.\n      input = input.replace /\\uFF00/g, '\\n'\n      # Node's REPL sends the input ending with a newline and then wrapped in\n      # parens. Unwrap all that.\n      input = input.replace /^\\(([\\s\\S]*)\\n\\)$/m, '$1'\n\n      context     = _options.context || context\n      variables   = _options.variables || _options.variables={}\n      error       = []\n      {\n        compile,\n        evaluate,\n        parse,\n        render,\n        stringify\n      }           = _options.command\n      {\n        mode,\n        compress\n      }           = _options.flags\n\n      Expression.callback (expression, result, stack, errors) ->\n        context['_'] = result\n        for own key, value of stack.local\n          variables[key] = value\n        error = error.concat(errors) if errors?\n        return\n\n      try\n        output =\n          switch mode\n            when 'c' then compile   input, null, compress\n            when 'p' then stringify input, null, compress\n            when 'r' then render    input, null, compress\n            when 's' then parse     input\n            else          evaluate  input, context, variables\n        callback _prettyErrorMessage(error, filename, input, yes), output\n        #callback null, vm.runInContext(js, context, filename)\n      catch error\n        callback _prettyErrorMessage(error, filename, input, yes)\n      return\n\n  ###*\n  #  -------------\n  # @method start\n  # @param {Object} command\n  # @param {Object} [flags={}]\n  # @param {Object} [options=defaults.options]\n  # @param {Boolean|Function}    [colorize]\n  # @static\n  ###\n  Repl.start = (command, flags = {}, options = _options) ->\n    [\n      major, minor #, build\n    ] = process.versions.node.split('.').map (n) -> parseInt(n)\n\n    if major is 0 and minor < 10\n      console.warn \"Node 0.10.0+ required for #{command.NAME} REPL\"\n      process.exit 1\n\n    _options = options\n    _options.command  = command\n    _options.flags    = flags\n    _options.prompt   = \"#{command.NAME}> \"\n    if process.env.HOME\n      _options.historyFile = path.join process.env.HOME, \".#{command.NAME}_history\"\n      _options.historyMaxInputSize = 10240\n\n    repl = NodeRepl.start options\n    repl.on 'exit', -> repl.outputStream.write '\\n'\n    _addMultilineHandler repl\n    if _options.historyFile?\n      _addHistory repl, _options.historyFile, _options.historyMaxInputSize\n    repl\n\nmodule.exports = Repl\n"]}