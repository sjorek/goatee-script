// Generated by CoffeeScript 1.6.3
/*
Â© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing
permissions and limitations under the License.
*/


(function() {
  var Expression, Interpreter, global, isArray, isExpression, isFunction, isNumber, isString, parseExpression, root, _ref, _ref1;

  global = (function() {
    return this;
  })();

  Expression = require('./Expression').Expression;

  _ref = require('./Utility').Utility, isString = _ref.isString, isArray = _ref.isArray, isNumber = _ref.isNumber, isFunction = _ref.isFunction, isExpression = _ref.isExpression, parseExpression = _ref.parseExpression;

  root = (_ref1 = typeof module !== "undefined" && module !== null ? module.exports : void 0) != null ? _ref1 : this;

  root.Interpreter = Interpreter = (function() {
    var _aliasSymbol, _compress, _parse, _primitive, _process, _toJSON, _toOpcode;

    function Interpreter() {}

    _aliasSymbol = /^[a-zA-Z$_]$/;

    _primitive = null;

    (function() {
      var alias, aliases, index, key, operations, value, _i, _len, _ref2;
      operations = Expression.operations;
      _primitive = operations.primitive.name;
      aliases = [];
      _ref2 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'.split('').reverse();
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        alias = _ref2[_i];
        if (operations[alias] == null) {
          aliases.push(alias);
        }
      }
      index = aliases.length;
      if (index === 0) {
        return;
      }
      for (key in operations) {
        value = operations[key];
        if ((value.name == null) || (value.alias != null)) {
          continue;
        }
        operations[value.alias = aliases[--index]] = key;
        if (index === 0) {
          return;
        }
      }
    })();

    Interpreter.compress = _compress = function(opcode, map) {
      var c, code, o;
      if (map == null) {
        map = {};
      }
      code = (function() {
        var _i, _len, _ref2, _results;
        _results = [];
        for (_i = 0, _len = opcode.length; _i < _len; _i++) {
          o = opcode[_i];
          if (o.length == null) {
            _results.push(o);
          } else if (o.substring != null) {
            if (_aliasSymbol.exec(o)) {
              if (map[o] != null) {
                ++map[o];
              } else {
                map[o] = 1;
              }
              _results.push(o);
            } else {
              _results.push(JSON.stringify(o));
            }
          } else {
            _ref2 = _compress(o, map), c = _ref2[0], map = _ref2[1];
            _results.push(c);
          }
        }
        return _results;
      })();
      return ["[" + (code.join(',')) + "]", map];
    };

    _process = function(opcode) {
      var index, operator, parameters, value, _i, _len, _len1;
      _len = 0;
      if (!((opcode != null) || (_len = opcode.length || 0) > 1 || isArray(opcode))) {
        return new Expression('primitive', _len === 0 ? [opcode != null ? opcode : null] : opcode);
      }
      parameters = [].concat(opcode);
      operator = parameters.shift();
      for (index = _i = 0, _len1 = parameters.length; _i < _len1; index = ++_i) {
        value = parameters[index];
        parameters[index] = isArray(value) ? _process(value) : value;
      }
      return new Expression(operator, parameters);
    };

    Interpreter.process = function(opcode) {
      if (opcode == null) {
        opcode = null;
      }
      return _process(opcode);
    };

    Interpreter.parse = _parse = function(code) {
      if (isString(code)) {
        return parseExpression(code);
      }
      return _process(code);
    };

    Interpreter.evaluate = function(code, context) {
      var expression;
      expression = _parse(code, context);
      return expression.evaluate(context);
    };

    Interpreter.render = function(code) {
      return _parse(code).toString();
    };

    Interpreter.toJSON = _toJSON = function(expression, callback, compress) {
      var opcode, parameter, _i, _len, _ref2;
      if (compress == null) {
        compress = false;
      }
      if (compress && expression.operator.name === _primitive) {
        return expression.parameters;
      }
      opcode = [compress && (expression.operator.alias != null) ? expression.operator.alias : expression.operator.name];
      _ref2 = expression.parameters;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        parameter = _ref2[_i];
        opcode.push(isExpression(parameter) ? _toJSON(parameter, callback, compress) : parameter);
      }
      return opcode;
    };

    Interpreter.toOpcode = _toOpcode = function(data, callback, compress) {
      var expression, opcode;
      if (compress == null) {
        compress = true;
      }
      expression = isExpression(data) ? data : _parse(data);
      opcode = _toJSON(expression, callback, compress);
      if (compress) {
        return _compress(opcode);
      } else {
        return opcode;
      }
    };

    Interpreter.stringify = function(data, callback, compress) {
      var opcode;
      if (compress == null) {
        compress = true;
      }
      opcode = _toOpcode(data, callback, compress);
      if (compress) {
        return opcode[0];
      } else {
        return JSON.stringify(opcode);
      }
    };

    Interpreter.toClosure = function(data, callback, compress, prefix) {
      var args, code, k, keys, map, opcode, v;
      if (compress == null) {
        compress = true;
      }
      opcode = _toOpcode(data, callback, compress);
      if (compress) {
        code = opcode[0], map = opcode[1];
        keys = (function() {
          var _results;
          _results = [];
          for (k in map) {
            v = map[k];
            _results.push(k);
          }
          return _results;
        })();
        args = keys.length === 0 ? '' : ",'" + keys.join("','") + "'";
        code = "(function(" + (keys.join(',')) + ") { return " + code + "; }).call(this" + args + ");";
      } else {
        keys = [];
        args = '';
        code = JSON.stringify(opcode);
      }
      return Function("" + (prefix || '') + "return " + code + ";");
    };

    return Interpreter;

  })();

}).call(this);

/*
//@ sourceMappingURL=Interpreter.map
*/
