{"version":3,"sources":["Notator.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;AAQA;;;;;;AAlCA;AAAA,MAAA;;EAuCM;;AAEJ;;;;;;;;;;AAAA,QAAA;;;;IAUA,OAAO,CAAC,MAAR,GAAiB,MAAA,GAAS;;;AAE1B;;;;;;;;;;;IAUA,OAAO,CAAC,IAAR,GAAe,IAAA,GAAO,SAAC,MAAD;aACpB,GAAA,GAAI,MAAJ,GAAW;IADS;;;AAGtB;;;;;;;;;;;;;;;;IAeA,OAAO,CAAC,SAAR,GAAoB,OAAO,CAAC,CAAR,GAAY,SAAC,OAAD,EAAU,MAAV,EAAkB,OAAlB;AAC9B,UAAA;MAAA,IAAA,CAA6C,MAA7C;AAAA,eAAO,CAAC,OAAD,EAAU,UAAV,EAAsB,OAAtB,EAAP;;MACA,MAAA,GAAY,CAAA,KAAA,GAAQ,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAR,CAAH,GAAmC,KAAM,CAAA,CAAA,CAAzC,GAAiD,IAAA,CAAK,MAAL;aAC1D,CAAC,OAAD,EAAU,OAAA,GAAQ,MAAR,GAAe,GAAzB,EAA6B,OAA7B;IAH8B;;;AAKhC;;;;;;;;;;;;;;IAaA,OAAO,CAAC,OAAR,GAAkB,OAAO,CAAC,CAAR,GAAY,SAAC,OAAD,EAAU,MAAV;AAC5B,UAAA;MAAA,IAAG,sBAAH;QACE,OAAA,GAAU,OAAO,CAAC,OADpB;;MAEA,IAAA,CAAmC,MAAnC;AAAA,eAAO,CAAC,OAAD,EAAU,SAAV,EAAP;;MACA,MAAA,GAAY,CAAA,KAAA,GAAQ,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAR,CAAH,GAAmC,KAAM,CAAA,CAAA,CAAzC,GAAiD,IAAA,CAAK,MAAL;aAC1D,CAAC,OAAD,EAAU,SAAA,GAAU,MAAV,GAAiB,GAA3B;IAL4B;;;AAO9B;;;;;;;;;;;;;;;;;;;IAkBA,OAAO,CAAC,WAAR,GAAsB,OAAO,CAAC,CAAR,GAAY,SAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB;aAChC,CAAC,UAAD,CAAY,CAAC,MAAb,CAAoB,OAAO,CAAC,OAAR,CAAgB,OAAhB,EAAyB,MAAzB,CAApB;IADgC;;;;;;EAGpC,MAAM,CAAC,OAAP,GAAiB;AA/HjB","file":"Notator.js","sourcesContent":["###\n© Copyright 2013-2017 Stephan Jorek <stephan.jorek@gmail.com>\n© Copyright 2009-2013 Jeremy Ashkenas <https://github.com/jashkenas>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n###\n\n###\n# # The Notator\n# -------------\n#\n# Provides static methods to declare jison-Grammars as json.\n#\n###\n\n###*\n# -------------\n# @class Notator\n# @namespace GoateeScript\n###\nclass Notator\n\n  ###*\n  # -------------\n  # Pattern to match a single-statement-function's return value.\n  #\n  # Lifted from [coffeescript's garmmar](http://jashkenas.github.com/coffee-script/documentation/docs/grammar.html)\n  #\n  # @property unwrap\n  # @type {RegExp}\n  # @static\n  ###\n  Notator.unwrap = unwrap = /^function\\s*\\(\\)\\s*\\{\\s*return\\s*([\\s\\S]*);\\s*\\}/\n\n  ###*\n  # -------------\n  # Wraps a multi-statement action into a closure call onto `this`.\n  #\n  # @method wrap\n  # @param  {Function|mixed}    [action]  function or object with\n  #                                       `object.toString`-capabillity\n  # @return {String}\n  # @static\n  ###\n  Notator.wrap = wrap = (action) ->\n    \"(#{action}.call(this))\"\n\n  ###*\n  # -------------\n  # Produce an operation\n  #\n  # Lifted from [coffeescript's grammar](http://jashkenas.github.com/coffee-script/documentation/docs/grammar.html)\n  #\n  # @method operation\n  # @alias  o\n  # @param  {String}          pattern   suitable for jison's regexp-parser\n  # @param  {Function|mixed}  [action]  function or object with\n  #                                     `object.toString`-capabillity\n  # @param  {mixed}           options   passed trough if an `action` is present\n  # @return {Array}\n  # @static\n  ###\n  Notator.operation = Notator.o = (pattern, action, options) ->\n    return [pattern, '$$ = $1;', options] unless action\n    action = if match = unwrap.exec action then match[1] else wrap action\n    [pattern, \"$$ = #{action};\", options]\n\n  ###*\n  # -------------\n  # Resolve and return an operation value.  Usually used to declare lexer tokens\n  # and root operations.\n  #\n  # @method resolve\n  # @alias r\n  # @param  {String}            pattern   suitable for jison's regexp-parser\n  # @param  {Function|mixed}    action    optional function or object with\n  #                                       `object.toString`-capabillity\n  # @return {Array}\n  # @static\n  ###\n  Notator.resolve = Notator.r = (pattern, action) ->\n    if pattern.source?\n      pattern = pattern.source\n    return [pattern, 'return;'] unless action\n    action = if match = unwrap.exec action then match[1] else wrap action\n    [pattern, \"return #{action};\"]\n\n  ###*\n  # -------------\n  # Resolve and return an operation value with start conditions, eg. to declare\n  # lexer tokens for sub-languages like regular expressions in javascript.\n  #\n  # See:\n  # - [Lexical Analysis](http://zaach.github.io/jison/docs/#lexical-analysis)\n  # - [Flex](http://dinosaur.compilertools.net/flex/flex_11.html)\n  #\n  # @method conditional\n  # @alias c\n  # @param  {Array}           condition suitable for jison's regexp-parser\n  # @param  {String}          pattern   suitable for jison's regexp-parser\n  # @param  {Function|mixed}  action    optional function or object with\n  #                                     `object.toString`-capabillity\n  # @return {Array}\n  # @static\n  ###\n  Notator.conditional = Notator.c = (conditions, pattern, action) ->\n    [conditions].concat Notator.resolve pattern, action\n\nmodule.exports = Notator\n"]}