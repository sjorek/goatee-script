{"version":3,"sources":["Grammar.coffee"],"names":[],"mappings":"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","file":"Grammar.js","sourceRoot":"/source/","sourcesContent":["###\n© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\n{Parser}    = require 'jison'\n{Notator:{\n  r,o\n}}          = require './Notator'\n{Scope}     = require './Scope'\n\nexports     = module?.exports ? this\n\n## Grammar …\n# -------------\n# … is always useful.\n\n# -------------\n# Implements the `goatee-script` grammar definitions.\n#\n# @class Grammary\n# @namepace GoateeScript\nexports.Grammar = class Grammar\n\n  # Actually this is not needed, but it looks nicer ;-)\n  $1 = $2 = $3 = $4 = $5 = $6 = $7 = $8 = null\n\n  yy = new Scope\n\n  # -------------\n  # Initializes the **Parser** with our **Grammar**\n  #\n  # @method createParser\n  # @param  {Grammar} [grammar]\n  # @param  {Scope}   [scope]\n  # @return {Parser}\n  # @static\n  Grammar.createParser = (grammar = new Grammar, scope = yy) ->\n    parser = new Parser grammar\n    parser.yy.goatee = scope\n    parser\n\n  # -------------\n  # Initializes the **Parser** with our **Grammar**\n  #\n  # @method createParser\n  # @param  {Parser}    [grammar]\n  # @param  {Function}  [log]\n  # @return {Parser}\n  # @static\n  Grammar.addLoggingToParser = ( \\\n    parser, \\\n    log = (args...)-> console.log.apply(null, args)) ->\n\n    lexer = parser.lexer\n    lex   = lexer.lex\n    set   = lexer.setInput\n    lexer.lex = (args...) ->\n      log 'lex', [lexer.match, lexer.matched]\n      lex.apply(lexer,args)\n    lexer.setInput = (args...) ->\n      log 'set', args\n      set.apply(lexer,args)\n    parser\n\n  # -------------\n  # assignment operation shortcut\n  #\n  # @method aop\n  # @static\n  Grammar.aop = aop = (op) -> o \"REFERENCE #{op} Expression\", ->\n    yy.goatee.create $2, [$1, $3]\n\n  # -------------\n  #  binary operation shortcut\n  #\n  # @method bop\n  # @static\n  Grammar.bop = bop = (op) -> o \"Expression #{op} Expression\", ->\n    yy.goatee.create $2, [$1, $3]\n\n  # -------------\n  # Now that we have our **Grammar.bnf** and our **Grammar.operators**, so\n  # we can create our **Jison.Parser**.  We do this by processing all of our\n  # rules, recording all terminals (every symbol which does not appear as the\n  # name of a rule above) as \"tokens\".\n  #\n  # @constructor\n  constructor: () ->\n    bnf = @bnf\n    startSymbol = @startSymbol\n    tokens = []\n    known = {}\n    tokenize = (name, alternatives) ->\n      for alt in alternatives\n        for token in alt[0].split ' '\n          tokens.push token if not bnf[token]? and not known[token]?\n          known[token] = true\n        alt[1] = \"#{alt[1]}\" if name is startSymbol\n        alt\n    for own name, alternatives of bnf\n      bnf[name] = tokenize(name, alternatives)\n    @tokens = tokens.join ' '\n\n  # Space-seperated list of grammar tokens, produced by this class' constructor\n  #\n  # @type {String}\n  # @property\n  tokens : null\n\n  # -------------\n  # Create and return the parsers source code wrapped into a closure, still\n  # keeping the value of `this`.\n  #\n  # @method create\n  # @param  {String} [comment]\n  # @param  {String} [prefix]\n  # @param  {String} [suffix]\n  # @param  {String} [parser]\n  # @param  {String} [scope]\n  # @return {String}\n  create: (comment = '''\n                     /* Goatee Script Parser */\n\n                     ''',\n           prefix  = '''\n                     (function() {\n\n                     ''',\n           suffix  = '''\n                     ;\n                     parser.yy.goatee = new (require(\"./Scope\").Scope);\n                     }).call(this);\n                     ''',\n           parser,\n           scope = yy) ->\n\n    parser = Grammar.createParser(this, scope) unless parser?\n\n    [comment, prefix, parser.generate(), suffix].join ''\n\n\n  # -------------\n  # Create and return an object representing the parser's grammar\n  #\n  # @method _exportGrammar\n  # @return {Object}\n  # @private\n  _exportGrammar : () ->\n    {\n      lex: this.lex\n      operators: this.operators\n      startSymbol: this.startSymbol\n      bnf: this.bnf\n    }\n\n  # -------------\n  # Create and return the parsers grammar as json string.\n  #\n  # @method exportJSONString\n  # @param  {Boolean|String|null} [indent]\n  # @return {String}\n  exportJSONString : (indent = null) ->\n    if indent?\n      if indent is true\n        indent = '    '\n      else if indent is false\n        indent = null\n    JSON.stringify @_exportGrammar, null, indent\n\n  # -------------\n  # Create and return the parsers grammar as json object.\n  #\n  # @method exportJSON\n  # @return {Object}\n  exportJSON : () ->\n    JSON.parse @exportJSONString()\n\n  # -------------\n  # Use the default jison-lexer\n  # @type {Object}\n  # @property\n  lex:\n\n    # Declare all lexer tokens\n    rules: [\n      # ignore white-spaces\n      r /\\s+/\n\n      # hexadecimal number\n      r /0x[a-fA-F0-9]+\\b/        , -> 'NUMBER'\n\n      # decimal number\n      r ///\n        ([1-9][0-9]+|[0-9])\n        (\\.[0-9]+)?\n        ([eE][-+]?[0-9]+)?\n        \\b\n        ///                       , -> 'NUMBER'\n\n      # constants\n      r /null\\b/                  , -> 'NULL'\n      r /true\\b/                  , -> 'TRUE'\n      r /false\\b/                 , -> 'FALSE'\n\n      # control flow statements\n      r /if\\b/                    , -> 'IF'\n      r /then\\b/                  , -> 'THEN'\n      r /else\\b/                  , -> 'ELSE'\n      # not yet implemented:\n      #\n      #      r /for\\b/                   , -> 'FOR'\n      #\n\n      # the following reserved word are not allowed and\n      # raise exceptions if used in the wrong place\n      r /return\\b/                , -> 'RETURN'\n      r /new\\b/                   , -> 'NEW'\n      r /typeof\\b/                , -> 'TYPEOF'\n      r /void\\b/                  , -> 'VOID'\n      r /instanceof\\b/            , -> 'INSTANCEOF'\n      r /yield\\b/                 , -> 'YIELD'\n      r /constructor\\b/           , -> 'CONSTRUCTOR'\n      r /(__proto__|prototype)\\b/ , -> 'PROTOTYPE'\n\n      # identifier has to come AFTER reserved words\n\n      r /this\\b/                  , -> 'THIS'       # root context\n      r /[@]/                     , -> 'SELF'       # current context\n\n      # access context or variable from …\n      #\n      # … current scope:\n      #\n      #     $$ ~ SELF ~ current context\n      #     $_        ~ current context's local variables\n      #     _$        ~ current context's chain of scopes\n      #     __        ~ current context's expression stack\n      #\n      # … parent contexts:\n      #\n      #     _0        ~ current - 1 level (parent) context\n      #     _1        ~ current - 2 levels (grand-parent) context\n      #     _2        ~ current - 3 levels context\n      #     …\n      #     _9        ~ current - 10 levels context\n      #\n      # … child contexts:\n      #\n      #     $9        ~ root + 9 levels context\n      #     …\n      #     $2        ~ root + 2 levels (grand-child) context\n      #     $1        ~ root + 1 level (child) context\n      #     $0 ~ THIS ~ root context\n      #\n      r /[$_][$_0-9]/             , -> 'CONTEXT'\n\n      # mind the delibrately reduced set of allowed (start) characters\n      # compare with ES3/ES5/ES6\n      r /[$_a-zA-Z]\\w*/           , -> 'REFERENCE'\n\n      # identifier above\n\n      # double-quoted string\n      r ///\n        \"\n        (\n          \\\\x[a-fA-F0-9]{2} |\n          \\\\u[a-fA-F0-9]{4} |\n          \\\\[^xu]           |\n          [^\\\\\"]\n        )*\n        \"\n        ///                       , -> 'STRING'\n\n      # single-quoted string\n      r ///\n        '\n        (\n          \\\\[/'\\\\bfnrt]     |\n          \\\\u[a-fA-F0-9]{4} |\n          [^\\\\']\n        )*\n        '\n        ///                       , -> 'STRING'\n\n      # ignore multiline-comments\n      r /\\/\\*(?:.|[\\r\\n])*?\\*\\//\n\n      # accessors below\n      r /\\./                      , -> '.'\n      r /\\[/                      , -> '['\n      r /\\]/                      , -> ']'\n      r /\\(/                      , -> '('\n      r /\\)/                      , -> ')'\n\n      # operators below\n      r /\\?/                      , -> '?'\n      r ':'                       , -> ':'\n      r ';'                       , -> ';'\n      r ','                       , -> ','\n      r '{'                       , -> '{'\n      r '}'                       , -> '}'\n\n      # Mathematical assigment operators\n      r '-='                      , ->   '-='\n      r /\\+=/                     , ->   '+='\n      r /\\*=/                     , ->   '*='\n      r /\\/=/                     , ->   '/='\n      r '%='                      , ->   '%='\n      r '--'                      , -> '--'\n      r /\\+\\+/                    , -> '++'\n\n      # Bitwise assigment operators\n      r '>>>='                    , -> '>>>='\n      r '>>='                     , ->  '>>='\n      r '<<='                     , ->  '<<='\n      r /\\&=/                     , ->   '&='\n      r /\\|=/                     , ->   '|='\n      r /\\^=/                     , ->   '^='\n\n      # Boolean operators\n      r '==='                     , -> '==='\n      r '!=='                     , -> '!=='\n      r '=='                      , -> '=='\n      r '!='                      , -> '!='\n      r '<='                      , -> '<='\n      r '>='                      , -> '>='\n      r '<'                       , -> '<'\n      r '>'                       , -> '>'\n      r /\\&\\&/                    , -> '&&'\n      r /\\|\\|/                    , -> '||'\n      # Not (!) must be lower priority than != and !==\n      r '!'                       , -> '!'\n\n      # Mathemetical operators\n      r '-'                       , -> '-'\n      r /\\+/                      , -> '+'\n      r /\\*/                      , -> '*'\n      r /\\//                      , -> '/'\n      r /\\^/                      , -> '^'\n      r '%'                       , -> '%'\n\n      # Bitwise operators\n      r '>>>'                     , -> '>>>'\n      r '>>'                      , -> '>>'\n      r '<<'                      , -> '<<'\n      r /\\&/                      , -> '&'\n      r /\\|/                      , -> '|'\n      r '~'                       , -> '~'\n\n      # Assignment operator\n      r '='                       , -> '='\n\n      # EOF is always last …\n      # TODO Figure out why the EOF token is “$”\n      r '$'                       , -> 'EOF'\n    ]\n\n  ### Operator Precedence\n  -------------\n\n  Declare operator precedence from highest to lowest,\n  see [Operator Precedence](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Operator_Precedence).\n\n  ###\n  operators: [\n    ['left', '.', '[', ']']                  #  1 member\n    ['right', 'NEW']                         #    new\n    ['left', '(', ')']                       #  2 call\n    ['nonassoc', '++', '--']                 #  3 decrement\n    ['right', '!', '~', \\ # '+', '-', \\      #  4 usually contains unary +/-\n              'TYPEOF', 'VOID', 'DELETE']\n    ['left', '*', '/', '%']                  #  5 multiply, divide, modulus\n    ['left', '+', '-']                       #  6 plus/add, minus/substract\n    ['left', '>>>', '>>', '<<']              #  7 bitwise shift\n    ['left', '<=', '>=', '<', '>']           #  8 relational\n    ['left', 'IN', 'INSTANCEOF']             #   … in …, … instanceof …\n    ['left', '===', '!==', '==', '!=']       #  9 equality\n    ['left', '^']                            # 11 bitwise and\n    ['left', '&']                            # 10 bitwise xor\n    ['left', '|']                            # 12 bitwise or\n    ['left', '&&']                           # 13 logical and\n    ['left', '||']                           # 14 logical or\n    ['right', '?', ':']                      # 15 inline conditional\n    ['right', 'YIELD']                       # 16 yield is not (yet?) supported\n    ['right', '=',    '+=', '-=',  '*=', \\   # 17 assignments\n              '/=',   '%=', '<<=', '>>=',\n              '>>>=', '&=', '^=',  '|=']\n    ['left', ',']                            # 18 comma\n\n  # Reverse the operators because jison orders precedence\n  # from low to high, and we have it high to low,\n  # see [Yacc](http://dinosaur.compilertools.net/yacc/index.html).\n  ].reverse()\n\n  # The **Script** is the top-level node in the syntax tree.\n  startSymbol : 'Script'\n\n  ### Syntax description …\n  -------------\n\n  … notated in Backus-Naur-Format.\n\n  ###\n  bnf:\n\n    # Since we parse bottom-up, all parsing must end here.\n    Script: [\n      r 'End'                       , -> yy.goatee.create 'scalar', [undefined]\n      r 'Statements End'            , -> $1\n      r 'Seperator Statements End'  , -> $2\n    ]\n\n    Statements: [\n      o 'Statement'\n      o 'Statements Seperator Statement', ->\n        if $1.operator.name is 'block'\n          $1.parameters.push $3\n          $1\n        else\n          yy.goatee.create 'block', [$1, $3]\n    ]\n\n    End: [\n      r 'EOF'\n      r 'Seperator EOF'\n    ]\n\n    Identifier: [\n      o 'THIS'\n      o 'REFERENCE'\n    ]\n\n    Seperator: [\n      r ';'\n      r 'Seperator ;'\n    ]\n\n    Statement: [\n      o 'Conditional'\n      o 'Expression'\n    ]\n\n    Parameters: [\n      o ''                          , -> []\n      o 'Expression'                , -> [$1]\n      o 'Parameters , Expression'   , -> $1.concat $3\n    ]\n\n    Key: [\n      o 'Scalar'\n      o 'Primitive'\n      o 'Property'\n    ]\n\n    KeyValues: [\n      o 'Key : Expression'          , -> [$1,$3]\n      o 'KeyValues , KeyValues'     , -> $1.concat $3\n    ]\n\n    Object: [\n      o '{ }'                       , -> yy.goatee.create 'object', []\n      o '{ KeyValues }'             , -> yy.goatee.create 'object', $2\n    ]\n\n    Elements: [\n      o ''                          , -> []\n      o 'Expression'                , -> [$1]\n      o 'Elements , Elements'       , ->\n        $1.concat if $3.length is 0 then [undefined] else $3\n    ]\n\n    Array: [\n      o '[ Elements ]'              , -> yy.goatee.create 'array', $2\n    ]\n\n    Block: [\n      o '{ Seperator }'             , -> yy.goatee.create 'scalar', [undefined]\n      o '{ Statements }'            , -> $2\n      o '{ Statements Seperator }'  , -> $2\n    ]\n\n    If: [\n      o 'IF Group Block'            , ->\n        yy.goatee.create 'if',  [$2,$3]\n      o 'If ELSE IF Group Block'    , ->\n        yy.goatee.addElse $1, yy.goatee.create('if', [$4,$5])\n    ]\n\n    Conditional: [\n      o 'If'\n      o 'If ELSE Block'             , -> yy.goatee.addElse $1, $3\n    ]\n\n    IncDec: [\n      o \"++\"\n      o \"--\"\n    ]\n\n    Assignment: [\n      o \"IncDec Identifier\"         , -> yy.goatee.create $1, [$2, 0]\n      o \"Identifier IncDec\"         , -> yy.goatee.create $2, [$1, 1]\n      aop '-='\n      aop '+='\n      aop '*='\n      aop '/='\n      aop '%='\n      aop '^='\n      aop '>>>='\n      aop '>>='\n      aop '<<='\n      aop '&='\n      aop '|='\n      aop '='\n    ]\n\n    Scalar: [\n      o 'NUMBER'                    , -> Number($1)\n      o '+ NUMBER'                  , -> + Number($2)\n      o '- NUMBER'                  , -> - Number($2)\n      o 'STRING'                    , -> yy.goatee.escape($1)\n    ]\n\n    Primitive: [\n      o 'NULL'                      , -> null\n      o 'TRUE'                      , -> true\n      o 'FALSE'                     , -> false\n    ]\n\n    Operation: [\n      # Mathemetical operations\n      bop '*'\n      bop '/'\n      bop '%'\n      bop '+'\n      bop '-'\n      # Boolean operations\n      o '! Expression'              , ->                # logical not\n        yy.goatee.create '!' , [$2]\n      bop '<='\n      bop '>='\n      bop '<'\n      bop '>'\n      bop '==='\n      bop '!=='\n      bop '=='\n      bop '!='\n      bop '&&'\n      bop '||'\n      # Bitwise operations\n      o '~ Expression'              , ->                # bitwise not\n         yy.goatee.create '~' , [$2]\n      bop '>>>'\n      bop '>>'\n      bop '<<'\n      bop '&'\n      bop '|'\n      bop '^'\n    ]\n\n    Literal: [\n      o 'Object'                                        # object literal\n      o 'Array'                                         # array literal\n      o 'Primitive'                 , ->                # boolean, null\n        yy.goatee.create 'scalar',  [$1]\n      o 'Scalar'                    , ->                # number, string\n        yy.goatee.create 'scalar',  [$1]\n    ]\n\n    Scope: [\n      o 'CONTEXT'                   , ->                # context reference\n        yy.goatee.create 'context', [$1]\n      o 'SELF'                      , ->                # this reference ≠ this\n        yy.goatee.create 'context', [$1]\n    ]\n\n    Reference: [\n      o 'Identifier'              , ->\n        yy.goatee.create 'reference', [$1]\n      o 'Scope Property'          , ->                  # shorthand dot operator\n        yy.goatee.create '.', [$1, yy.goatee.create('property', [$2])]\n      o 'Scope'\n    ]\n\n    Property: [\n      # CONSTRUCTOR and PROTOTYPE should be safe …\n      o 'CONSTRUCTOR'\n      o 'PROTOTYPE'\n      # … if not remove them here and adjust tests accordingly !\n      o 'THIS'\n      o 'IF'\n      o 'THEN'\n      o 'ELSE'\n      o 'YIELD'\n      o 'INSTANCEOF'\n      o 'VOID'\n      o 'TYPEOF'\n      o 'NEW'\n      o 'RETURN'\n      o 'CONTEXT'\n      o 'REFERENCE'\n      o 'CONTEXT Property'        , -> $1 + $2\n      o 'CONTEXT Primitive'       , -> $1 + $2\n    ]\n\n    Chain: [\n      o 'Expression . Primitive'  , ->\n        yy.goatee.create '.', [$1, yy.goatee.create('property', [$3])]\n      o 'Expression . Property'   , ->\n        yy.goatee.create '.', [$1, yy.goatee.create('property', [$3])]\n    ]\n\n    List: [\n      o 'Statement'\n      o 'List , Statement'        , ->\n        if $1.operator.name is 'list'\n          $1.parameters.push $3\n          $1\n        else\n          yy.goatee.create 'list', [$1, $3]\n    ]\n\n    Group: [\n      o '( List )'                , -> yy.goatee.create 'group', [$2]\n    ]\n\n    Expression: [\n      o 'Expression ? Expression : Expression', ->      # ternary conditional\n        yy.goatee.create '?:', [$1, $3, $5]\n      o 'Expression ( Parameters )', ->                 # function call\n        yy.goatee.create '()', [$1].concat $3\n      o 'Expression [ Expression ]', ->                 # indexer\n        yy.goatee.create '[]', [$1, $3]\n      o 'Assignment'\n      o 'Reference'\n      o 'Literal'\n      o 'Operation'\n      o 'Chain'\n      o 'Group'\n    ]\n"]}