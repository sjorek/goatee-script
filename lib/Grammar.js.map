{"version":3,"sources":["Grammar.coffee"],"names":[],"mappings":"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","file":"Grammar.js","sourceRoot":"/source/","sourcesContent":["###\n© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n<http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied. See the License for the specific language governing\npermissions and limitations under the License.\n###\n\npath       = require 'path'\n\n{Parser}   = require 'jison'\n{Notator}  = require './Notator'\n{Scope}    = require './Scope'\n{Utility}  = require './Utility'\n\nisString   = Utility.isString\nisFunction = Utility.isFunction\n\nexports     = module?.exports ? this\n\n###\n# # Grammar …\n# -----------\n#\n# … is always useful.\n###\n\n###*\n# -------------\n# Implements the `goatee-script` grammar definitions.\n#\n# @class Grammar\n# @namepace GoateeScript\n###\nexports.Grammar = class Grammar\n\n  ###*\n  # -------------\n  # Loads the our **Grammar**\n  #\n  # @method loadGrammar\n  # @param  {String} [filename]\n  # @return {Parser}\n  # @static\n  ###\n  Grammar.load = (filename = \"./grammar/jison.coffee\",\n                  scope = {},\n                  notator = Notator)->\n\n    scope.goatee = new Scope() unless scope.goatee\n\n    grammar = require filename\n    # console.log 'load', grammar\n    ext = path.extname(filename)\n    grammar = grammar(scope, notator) if isFunction grammar\n    grammar.yy.goatee = scope.goatee\n    grammar\n\n  ###*\n  # -------------\n  # Initializes our **Grammar**\n  #\n  # @method createParser\n  # @param  {String|Object} grammar filepath or object\n  # @return {Grammar}\n  # @static\n  ###\n  Grammar.create = (grammar = null, scope = {}, notator = Notator)->\n    if grammar is null or isString grammar\n      grammar = Grammar.load(grammar, scope, notator)\n    # console.log 'create', grammar\n    grammar = new Grammar grammar\n\n\n  ###*\n  # -------------\n  # Create and return the parsers source code wrapped into a closure, still\n  # keeping the value of `this`.\n  #\n  # @method generateParser\n  # @param  {Function} [generator]\n  # @param  {String} [comment]\n  # @param  {String} [prefix]\n  # @param  {String} [suffix]\n  # @return {String}\n  # @static\n  ###\n  Grammar.generateParser = (parser = null,\n                            comment = '''\n                                      /* Goatee Script Parser */\n\n                                      ''',\n                            prefix  = '''\n                                      (function() {\n\n                                      ''',\n                            suffix  = '''\n                                      ;\n                                      parser.yy.goatee = new (require(\"./Scope\").Scope);\n                                      }).call(this);\n                                      ''') ->\n\n    if parser is null or isString parser\n      parser = Grammar.createParser(parser)\n\n    [comment, prefix,  parser.generate(), suffix].join ''\n\n  ###*\n  # -------------\n  # Initializes the **Parser** with our **Grammar**\n  #\n  # @method createParser\n  # @param  {Grammar} [grammar]\n  # @param  {Function|Boolean} [log]\n  # @return {Parser}\n  # @static\n  ###\n  Grammar.createParser = (grammar = null, log = null) ->\n    if grammar is null or isString grammar\n      grammar = Grammar.create grammar\n    # console.log 'createParser', grammar\n    parser = new Parser grammar.grammar\n    parser.yy.goatee = grammar.grammar.yy.goatee\n    if log?\n      Grammar.addLoggingToLexer(parser, if log is true then null else log)\n    parser\n\n  ###*\n  # -------------\n  # Adds logging to the parser's lexer\n  #\n  # @method addLoggingToLexer\n  # @param  {Parser}    [grammar]\n  # @param  {Function}  [log]\n  # @return {Parser}\n  # @static\n  ###\n  Grammar.addLoggingToLexer = (parser, \\\n                               log = (a...) -> console.log.apply(console, a))->\n\n    lexer = parser.lexer\n    lex   = lexer.lex\n    set   = lexer.setInput\n    lexer.lex = (args...) ->\n      log 'lex', [lexer.match, lexer.matched]\n      lex.apply lexer, args\n    lexer.setInput = (args...) ->\n      log 'set', args\n      set.apply lexer, args\n    parser\n\n\n  ###*\n  # -------------\n  # @property filename\n  # @type {String}\n  ###\n  filename: null\n\n  ###*\n  # -------------\n  # @property grammar\n  # @type {Object}\n  ###\n  grammar: null\n\n  ###*\n  # -------------\n  # Use the default jison-lexer\n  #\n  # @constructor\n  ###\n  constructor: (@grammar) ->\n    # console.log @grammar\n    @tokenize(@grammar) unless @grammar.tokens?\n\n  ###*\n  # -------------\n  # Now that we have our **Grammar.bnf** and our **Grammar.operators**, so\n  # we can create our **Jison.Parser**.  We do this by processing all of our\n  # rules, recording all terminals (every symbol which does not appear as the\n  # name of a rule above) as \"tokens\".\n  #\n  # @method tokenize\n  # @param {Object|Grammar} grammar\n  # @return {String}\n  ###\n  tokenize: (grammar) ->\n    {bnf, startSymbol, operators} = grammar\n    tokens = []\n    known = {}\n    tokenizer = (name, alternatives) ->\n      for alt in alternatives\n        for token in alt[0].split ' '\n          tokens.push token if not bnf[token]? and not known[token]?\n          known[token] = true\n        alt[1] = \"#{alt[1]}\" if name is startSymbol\n        alt\n\n    for own name, alternatives of bnf\n      bnf[name] = tokenizer(name, alternatives)\n\n    grammar.known = known\n    grammar.tokens = tokens.join ' '\n\n  ###*\n  # -------------\n  # Returns an object containing parser's exportable grammar as references.\n  #\n  # @method toObject\n  # @return {Object}\n  # @private\n  ###\n  toObject : () ->\n    out =\n      startSymbol: @grammar.startSymbol\n      bnf: @grammar.bnf\n      lex: @grammar.lex\n      operators: @grammar.operators\n      tokens: @grammar.tokens\n      yy: {}\n\n    out.filename = @filename if @filename?\n\n    out\n\n  ###*\n  # -------------\n  # Export the parsers exportable grammar as json string.\n  #\n  # @method toString\n  # @param  {Function|null} [replacer]\n  # @param  {Boolean|String|null} [indent]\n  # @return {String}\n  ###\n  toJSONString : (replacer = null, indent = null) ->\n    if indent?\n      if indent is true\n        indent = '    '\n      else if indent is false\n        indent = null\n    JSON.stringify @toObject(), replacer, indent\n\n  ###*\n  # -------------\n  # Export the parsers exportable grammar as json object (deep clone).\n  #\n  # @method toJSON\n  # @param  {Function|null} [replacer]\n  # @return {Object}\n  ###\n  toJSON : (replacer = null) ->\n    JSON.parse @toJSONString(replacer)\n"]}