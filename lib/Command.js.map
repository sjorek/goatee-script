{"version":3,"sources":["Command.coffee"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,MAAA;;EA2BA,MAAA,GAAiB,OAAA,CAAQ,QAAR;;EAChB,QAAgB,OAAA,CAAQ,eAAR;;;AAEjB;;;;;;;;;AAQA;;;;;;EAKM;;AAEJ;;;;;AAAA,QAAA;;IAKA,IAAA,GAAc;;;AAEd;;;;;;IAKA,UAAA,GAAc;;;AAEd;;;;;;IAKc,iBAAC,OAAD;MAAC,IAAC,CAAA,4BAAD,UAAW,OAAA,CAAQ,gBAAR;IAAZ;;;AAEd;;;;;;sBAKA,SAAA,GAAc,SAAC,IAAD;aACZ,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAAA,GAAO,IAA5B;IADY;;;AAGd;;;;;;sBAKA,SAAA,GAAc,SAAC,IAAD;aACZ,OAAO,CAAC,MAAM,CAAC,KAAf,CAAqB,IAAA,GAAO,IAA5B;IADY;;;AAGd;;;;;;sBAKA,YAAA,GAAc,SAAA;AAEZ,UAAA;MAAA,UAAA,GAAa;MAGb,IAAA,GAAO,MACL,CAAC,MADI,CACG,IAAC,CAAA,OAAO,CAAC,IADZ,CAGL,CAAC,MAHI,CAGG,YAHH,EAGiB;QACpB,IAAA,EAAM,IADc;QAEpB,IAAA,EAAM,QAFc;QAGpB,QAAA,EAAU,CAHU;QAIpB,IAAA,EAAM,iDAJc;OAHjB,CASL,CAAC,MATI,CASG,KATH,EASU;QACb,IAAA,EAAM,GADO;QAEb,IAAA,EAAM,QAFO;QAGb,OAAA,EAAS,WAHI;QAIb,IAAA,EAAM,IAJO;QAKb,IAAA,EAAM,yCAAA,GAA0C,UAA1C,GAAqD,WAL9C;OATV,CAgBL,CAAC,MAhBI,CAgBG,MAhBH,EAgBW;QACd,IAAA,EAAM,GADQ;QAEd,IAAA,EAAM,IAFQ;QAGd,IAAA,EAAM,2BAHQ;OAhBX,CAqBL,CAAC,MArBI,CAqBG,aArBH,EAqBkB;QACrB,IAAA,EAAM,GADe;QAErB,IAAA,EAAM,IAFe;QAGrB,IAAA,EAAM,sBAAA,GAAuB,IAAC,CAAA,OAAO,CAAC,IAAhC,GAAqC,SAArC,GAA8C,UAA9C,GAAyD,4BAH1C;OArBlB,CA0BL,CAAC,MA1BI,CA0BG,MA1BH,EA0BW;QACd,OAAA,EAAS,MADK;QAEd,IAAA,EAAM,GAFQ;QAGd,CAAA,OAAA,CAAA,EAAS,MAHK;QAId,OAAA,EAAS,CAAC,SAAD,EAAY,GAAZ,EAAiB,UAAjB,EAA6B,MAA7B,EAAqC,GAArC,EAA0C,OAA1C,EAAmD,GAAnD,EAAwD,QAAxD,EAAkE,GAAlE,EAAuE,WAAvE,EAAoF,QAApF,EAA8F,GAA9F,CAJK;QAKd,IAAA,EAAM,2CAAA,GAA4C,UAA5C,GAAuD,sCAL/C;OA1BX,CAiCL,CAAC,MAjCI,CAiCG,UAjCH,EAiCe;QAClB,IAAA,EAAM,GADY;QAElB,IAAA,EAAM,IAFY;QAGlB,IAAA,EAAM,yCAHY;OAjCf,CAsCL,CAAC,MAtCI,CAsCG,QAtCH,EAsCa;QAChB,OAAA,EAAS,QADO;QAEhB,IAAA,EAAM,IAFU;QAGhB,IAAA,EAAM,yCAAA,GAA0C,UAA1C,GAAqD,qCAH3C;OAtCb,CA4CL,CAAC,MA5CI,CA4CG,SA5CH,EA4Cc;QACjB,IAAA,EAAM,GADW;QAEjB,IAAA,EAAM,IAFW;QAGjB,IAAA,EAAM,qCAHW;OA5Cd,CAkDL,CAAC,IAlDI,CAkDC,8BAAA,GAA+B,IAAC,CAAA,OAAO,CAAC,IAAxC,GAA6C,yBAlD9C,CAmDL,CAAC,KAnDI,CAAA;MAqDP,UAAA,GAAa,EACX,CAAC,MADU,CACA,uBAAH,GAAyB,IAAI,CAAC,UAA9B,GAA8C,EAD3C,CAEX,CAAC,MAFU,CAEA,gBAAH,GAAkB,IAAI,CAAC,GAAvB,GAAgC,EAF7B;MAMb,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,IAAK,CAAA,CAAA;MACtB,IAAI,CAAC,QAAL,IAAI,CAAC,MAAQ,UAAU,CAAC,MAAX,GAAoB;aAEjC,UAAA,GAAa,UAAU,CAAC,IAAX,CAAgB,GAAhB;IAnED;;;AAqEd;;;;;;;;sBAOA,QAAA,GAAc,SAAA;aACZ,KAAA,CAAM,OAAO,CAAC,QAAd,EAAwB,IAAI,CAAC,MAA7B,EACE;QAAA,GAAA,EAAY,OAAO,CAAC,GAAR,CAAA,CAAZ;QACA,GAAA,EAAY,OAAO,CAAC,GADpB;QAEA,SAAA,EAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFZ;OADF;IADY;;;AAMd;;;;;;;;sBAOA,OAAA,GAAc,SAAA;aACT,IAAC,CAAA,OAAO,CAAC,IAAV,GAAe,WAAf,GAA0B,IAAC,CAAA,OAAO,CAAC;IADzB;;;AAGd;;;;;;;sBAMA,OAAA,GAAc,SAAA;AACZ,cAAO,IAAI,CAAC,IAAZ;AAAA,aACO,SADP;AAAA,aACoB,GADpB;iBAC6B,IAAC,CAAA,OAAO,CAAC,OAAT,CAAoB,UAApB,EAAgC,IAAhC,EAAsC,IAAI,CAAC,QAA3C;AAD7B,aAEO,OAFP;AAAA,aAEoB,GAFpB;iBAE6B,IAAC,CAAA,OAAO,CAAC,SAAT,CAAoB,UAApB,EAAgC,IAAhC,EAAsC,IAAI,CAAC,QAA3C;AAF7B,aAGO,QAHP;AAAA,aAGoB,GAHpB;iBAG6B,IAAC,CAAA,OAAO,CAAC,MAAT,CAAoB,UAApB,EAAgC,IAAhC,EAAsC,IAAI,CAAC,QAA3C;AAH7B,aAIO,WAJP;AAAA,aAKO,QALP;AAAA,aAKoB,GALpB;iBAK6B,IAAI,CAAC,SAAL,CAAe,IAAC,CAAA,OAAO,CAAC,QAAT,CAAkB,UAAlB,CAAf;AAL7B,aAMO,UANP;AAAA,aAOO,MAPP;AAAA,aAOoB,GAPpB;iBAO6B,IAAC,CAAA,OAAO,CAAC,QAAT,CAAkB,UAAlB;AAP7B;AAQO,gBAAU,IAAA,KAAA,CAAM,+BAAN;AARjB;IADY;;;AAWd;;;;;;;;;sBAQA,WAAA,GAAc,SAAC,IAAD;;QAAC,OAAO,OAAA,CAAQ,QAAR;;aACpB,IAAI,CAAC,KAAL,CAAW,IAAC,CAAA,OAAZ,EAAqB,IAArB;IADY;;;AAGd;;;;;;;;;;sBASA,GAAA,GAAc,SAAA;MACZ,IAAC,CAAA,YAAD,CAAA;MACA,IAAiC,IAAI,CAAC,MAAtC;AAAA,eAAO,IAAC,CAAA,QAAD,CAAA,EAAP;;MACA,IAAiC,IAAI,CAAC,OAAtC;AAAA,eAAO,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,OAAD,CAAA,CAAX,EAAP;;MACA,IAAiC,IAAI,CAAC,WAAtC;AAAA,eAAO,IAAC,CAAA,WAAD,CAAA,EAAP;;MACA,IAAiC,IAAI,CAAC,GAAtC;AAAA,eAAO,IAAC,CAAA,SAAD,CAAW,IAAC,CAAA,OAAD,CAAA,CAAX,EAAP;;aACA,IAAC,CAAA,WAAD,CAAA;IANY;;;;;;EAQhB,MAAM,CAAC,OAAP,GAAiB;AAhOjB","file":"Command.js","sourcesContent":["###\n© Copyright 2013-2016 Stephan Jorek <stephan.jorek@gmail.com>\n© Copyright 2009-2013 Jeremy Ashkenas <https://github.com/jashkenas>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n###\n\n# External dependencies.\nnomnom         = require 'nomnom'\n{spawn}        = require 'child_process'\n\n###\n# # Commandline …\n# ---------------\n#\n# … of the `goatee-script` utility. Handles evaluation of\n# statements or launches an interactive REPL.\n###\n\n###*\n# -------------\n# @class Command\n# @namespace GoateeScript\n###\nclass Command\n\n  ###*\n  # @property opts\n  # @type {Object}\n  # @private\n  ###\n  opts        = null\n\n  ###*\n  # @property statements\n  # @type {Array}\n  # @private\n  ###\n  statements  = null\n\n  ###*\n  # -------------\n  # @constructor\n  # @param {Function} [command=GoateeScript.GoateeScript] class function\n  ###\n  constructor : (@command = require('./GoateeScript')) ->\n\n  ###*\n  # -------------\n  # @method printLine\n  # @param {String} line\n  ###\n  printLine   : (line) ->\n    process.stdout.write line + '\\n'\n\n  ###*\n  # -------------\n  # @method printWarn\n  # @param {String} line\n  ###\n  printWarn   : (line) ->\n    process.stderr.write line + '\\n'\n\n  ###*\n  # -------------\n  # @method parseOptions\n  # @return {Array}\n  ###\n  parseOptions: ->\n\n    shift_line = \"\\n                                  \"\n    # Use the [nomnom](http://github.com/harthur/nomnom.git) to extract\n    # all options from `process.argv` that are specified here.\n    opts = nomnom\n      .script(@command.NAME)\n      # The list of all the valid options that `goatee-script` knows.\n      .option('statements', {\n        list: true,\n        type: 'string'\n        position: 0\n        help: 'string passed from the command line to evaluate'\n      })\n      .option('run', {\n        abbr: 'r',\n        type: 'string'\n        metavar: 'STATEMENT'\n        list: true,\n        help: \"string passed from the command line to #{shift_line} evaluate\"\n      })\n      .option('help', {\n        abbr: 'h',\n        flag: true,\n        help: \"display this help message\"\n      })\n      .option('interactive', {\n        abbr: 'i',\n        flag: true,\n        help: \"run an interactive `#{@command.NAME}` read-#{shift_line} execute-print-loop (repl)\"\n      })\n      .option('mode', {\n        metavar: 'MODE'\n        abbr: 'm',\n        default: 'eval',\n        choices: ['compile', 'c', 'evaluate', 'eval', 'e', 'print', 'p', 'render', 'r', 'stringify', 'string', 's']\n        help: \"[c]ompile, [e]valuate, [p]rint, [r]ender #{shift_line} or [s]tringify statements, default:\"\n      })\n      .option('compress', {\n        abbr: 'c',\n        flag: true,\n        help: \"compress the abstract syntax tree (ast)\"\n      })\n      .option('nodejs', {\n        metavar: 'OPTION'\n        list: true\n        help: \"pass one option directly to the 'node' #{shift_line} binary, repeat for muliple options\"\n      })\n      #['-t', '--tokens',          'print out the tokens that the lexer/rewriter produce']\n      .option('version', {\n        abbr: 'v',\n        flag: true,\n        help: \"display the version number and exit\"\n      })\n      # The help banner to print when `goatee-script` is called without arguments.\n      .help(\"If called without options, `#{@command.NAME}` will run interactive.\")\n      .parse()\n\n    statements = []\n      .concat(if opts.statements? then opts.statements else [])\n      .concat(if opts.run? then opts.run else [])\n      #.concat(if opts._? then opts._ else [])\n\n\n    opts.mode = opts.mode[0]\n    opts.run ||= statements.length > 0\n\n    statements = statements.join(';')\n\n  ###*\n  # -------------\n  # Start up a new Node.js instance with the arguments in `--nodejs` passed to\n  # the `node` binary, preserving the other options.\n  #\n  # @method forkNode\n  ###\n  forkNode    : ->\n    spawn process.execPath, opts.nodejs,\n      cwd:        process.cwd()\n      env:        process.env\n      customFds:  [0, 1, 2]\n\n  ###*\n  # -------------\n  # Print the `--version` message and exit.\n  #\n  # @method version\n  # @return {String}\n  ###\n  version     : ->\n    \"#{@command.NAME} version #{@command.VERSION}\"\n\n  ###*\n  # -------------\n  # Execute the given statements\n  #\n  # @method execute\n  ###\n  execute     : ->\n    switch opts.mode\n      when 'compile'  , 'c' then @command.compile    statements, null, opts.compress\n      when 'print'    , 'p' then @command.stringify  statements, null, opts.compress\n      when 'render'   , 'r' then @command.render     statements, null, opts.compress\n      when 'stringify', \\\n           'string'   , 's' then JSON.stringify @command.evaluate statements\n      when 'evaluate' , \\\n           'eval'     , 'e' then @command.evaluate statements\n      else throw new Error 'Unknown execution-mode given.'\n\n  ###*\n  # -------------\n  # Run the interactive read-execute-print-loop\n  # Execute the given statements\n  #\n  # @method interactive\n  # @param  {Function}             [repl=GoateeScript.Repl]\n  ###\n  interactive : (repl = require('./Repl')) ->\n    repl.start(@command, opts)\n\n  ###*\n  # -------------\n  # Run the command by parsing passed options and determining what action to\n  # take. Flags passed after `--` will be passed verbatim to your script as\n  # arguments in `process.argv`\n  # Execute the given statements\n  #\n  # @method run\n  ###\n  run         : ->\n    @parseOptions()\n    return @forkNode()            if opts.nodejs\n    return @printLine @version()  if opts.version\n    return @interactive()         if opts.interactive\n    return @printLine @execute()  if opts.run\n    @interactive()\n\nmodule.exports = Command\n"]}