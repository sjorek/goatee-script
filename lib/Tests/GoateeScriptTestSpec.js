// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>
© Copyright 2012 Kris Nye <krisnye@gmail.com>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var Benchmark, evaluate, isArray, parse, render, _ref;

  Benchmark = require('benchmark');

  _ref = require('../GoateeScript').GoateeScript, evaluate = _ref.evaluate, parse = _ref.parse, render = _ref.render;

  isArray = require('../GoateeScript/Utility').Utility.isArray;

  describe("GoateeScript", function() {
    var benchmark, compare, data, egal, sum;
    data = {
      clothes: [
        {
          name: 'Shirt',
          sizes: ['S', 'M', 'L'],
          price: 14.50,
          quantity: 8
        }, {
          name: 'Pants',
          sizes: [29, 30, 31, 32],
          price: 20.19,
          quantity: 6
        }, {
          name: 'Shoes',
          sizes: [8, 9, 10],
          price: 25.85,
          quantity: 15
        }, {
          name: 'Ties',
          sizes: [2],
          price: 3.99,
          quantity: 3
        }
      ],
      codes: {
        alpha: {
          discount: 10,
          items: 4
        },
        beta: {
          discount: 20,
          items: 2
        },
        charlie: {
          discount: 30,
          items: 1
        }
      },
      favoriteChild: 'pat',
      children: {
        pat: {
          name: 'pat',
          age: 28,
          children: {
            jay: {
              name: 'jay',
              age: 4
            },
            bob: {
              name: 'bob',
              age: 8
            }
          }
        },
        skip: {
          name: 'skip',
          age: 30,
          children: {
            joe: {
              name: 'joe',
              age: 7
            }
          }
        }
      },
      dynamic: 0,
      increment: function(count) {
        return this.dynamic += count;
      },
      min: function(a, b) {
        if (b == null) {
          return a;
        }
        if (a == null) {
          return b;
        }
        if (a.valueOf() <= b.valueOf()) {
          return a;
        } else {
          return b;
        }
      },
      max: function(a, b) {
        if (b == null) {
          return a;
        }
        if (a == null) {
          return b;
        }
        if (a.valueOf() >= b.valueOf()) {
          return a;
        } else {
          return b;
        }
      },
      sum: sum = function(a) {
        var item, number, total, _i, _len;
        if (a == null) {
          return 0;
        }
        if (isArray(a)) {
          total = 0;
          for (_i = 0, _len = a.length; _i < _len; _i++) {
            item = a[_i];
            total += sum(item);
          }
          return total;
        }
        number = Number(a);
        if (isNaN(number)) {
          return 0;
        } else {
          return number;
        }
      }
    };
    benchmark = new Benchmark.Suite;
    egal = function(code, expected) {
      var expression;
      expression = parse(code);
      return expect(expression.evaluate(data)).toBe(expected);
    };
    compare = function(code, expected) {
      var expression;
      expression = parse(code);
      return expect(JSON.stringify(expression.evaluate(data))).toBe(JSON.stringify(expected));
    };
    it('can add two positive numbers', function() {
      return egal('1+1', 2);
    });
    xit('can add two positive numbers in given time', function(done) {
      return benchmark.add('goatee-script  : 1+1', function() {
        return evaluate('1+1');
      }).add('javascript     : 1+1', function() {
        return 1 + 1;
      }).add('javascript eval: 1+1', function() {
        return eval('1+1');
      }).on('cycle', function(event) {
        return console.log(String(event.target));
      }).on('complete', function() {
        expect(this.filter('fastest').pluck('name')[0]).toBe('javascript     : 1+1');
        return done();
      }).run({
        async: false
      });
    });
    it('resolves expression vectors', function() {
      expect(parse('5').vector).toBe(false);
      expect(parse('5+2').vector).toBe(false);
      return expect(parse('func(alpha)').vector).toBe(false);
    });
    it('resolves one or multiple collapsing “undefined” values', function() {
      var s, statements, _i, _len, _results;
      statements = ['', ';;;;', ';/* nix */;'];
      _results = [];
      for (_i = 0, _len = statements.length; _i < _len; _i++) {
        s = statements[_i];
        expect(evaluate(s)).toBe(void 0);
        _results.push(expect(render(s)).toBe(''));
      }
      return _results;
    });
    it('resolves one or multiple “null” values', function() {
      var s, statements, _i, _len, _results;
      statements = ['null', 'null;null', 'null;null;null'];
      _results = [];
      for (_i = 0, _len = statements.length; _i < _len; _i++) {
        s = statements[_i];
        expect(evaluate(s)).toBe(null);
        _results.push(expect(render(s)).toBe(s));
      }
      return _results;
    });
    it('resolves multiple “null” and collapsing “undefined” values', function() {
      var s, statements, _i, _len, _results;
      statements = [';null;null;;', 'null;;null;;', 'null;/*;null;*/null;;'];
      _results = [];
      for (_i = 0, _len = statements.length; _i < _len; _i++) {
        s = statements[_i];
        expect(evaluate(s)).toBe(null);
        _results.push(expect(render(s)).toBe('null;null'));
      }
      return _results;
    });
    it('resolves scalar values (primitives)', function() {
      egal("5", 5);
      egal("'5'", '5');
      egal("1 + 2", 3);
      egal("1 + 2 * 3", 7);
      return egal("'a' + 'b'", 'ab');
    });
    it('resolves object access', function() {
      egal("codes", data.codes);
      egal("codes.alpha", data.codes.alpha);
      egal("codes.alpha.discount", data.codes.alpha.discount);
      return egal("codes.discount", void 0);
    });
    xit('resolves object with children access', function() {
      compare("*", _.values(data));
      compare("codes.*", [data.codes.alpha, data.codes.beta, data.codes.charlie]);
      compare("codes.*.discount", [10, 20, 30]);
      return compare("codes.*{discount > 10}", [data.codes.beta, data.codes.charlie]);
    });
    it('resolves array access', function() {
      egal("clothes[0]", data.clothes[0]);
      return egal("clothes[-1]", data.clothes[data.clothes.length - 1]);
    });
    it('resolves scope access', function() {
      egal("children", data.children);
      return egal("children.children", void 0);
    });
    xit('resolves children access', function() {
      compare("children.*", [data.children.pat, data.children.skip]);
      compare("children.*.children", [data.children.pat.children, data.children.skip.children]);
      return compare("children.*.children.*", [data.children.pat.children.jay, data.children.pat.children.bob, data.children.skip.children.joe]);
    });
    xit('resolves object access predicates', function() {
      egal("@{clothes != null}", data);
      compare("@{clothes == null}", void 0);
      compare("children.*{name == 'skip'}", [data.children.skip]);
      return compare("children.*{children.*{age < 5}}", [data.children.pat]);
    });
    it('resolves constructor access', function() {
      egal("codes.constructor", void 0);
      egal("codes.__proto__", void 0);
      return egal("codes.prototype", void 0);
    });
    it('resolves prototype access', function() {
      egal("codes + ''", data.codes.toString());
      egal("codes.toString()", data.codes.toString());
      egal("codes.valueOf()", data.codes.valueOf());
      return egal("clothes.length", 4);
    });
    xit('resolves array access predicates', function() {
      compare("clothes.*.sizes.*{@ % 2 == 0}", [30, 32, 8, 10, 2]);
      return compare("clothes.*{sizes == 'M' || sizes == 9}", [
        {
          name: 'Shirt',
          sizes: ['S', 'M', 'L'],
          price: 14.50,
          quantity: 8
        }, {
          name: 'Shoes',
          sizes: [8, 9, 10],
          price: 25.85,
          quantity: 15
        }
      ]);
    });
    it('resolves context references', function() {
      egal("@", data);
      egal("$$", data);
      compare("test = 1 ; $_", {
        test: 1
      });
      return egal("children[favoriteChild]", data.children.pat);
    });
    xit('resolves context references with predicate', function() {
      return egal("children.*{name == favoriteChild}[0]", data.children.pat);
    });
    xit('resolves context specific operation using .(local paths) syntax.', function() {
      return egal("sum(clothes.*.(price * quantity))", 636.86);
    });
    it('resolves context reference function calls', function() {
      egal("min(12, 20)", 12);
      return egal("max(30, 50)", 50);
    });
    it('resolves object and array literals', function() {
      var ary, obj;
      obj = {
        alpha: data.codes.alpha.discount,
        beta: 2
      };
      ary = [3, 2, data.codes.beta.discount];
      compare('{alpha:codes.alpha.discount,"beta":2}', obj);
      compare('[3,2,codes.beta.discount]', ary);
      obj.charlie = ary;
      return compare('{alpha:codes.alpha.discount,"beta":2,charlie:[3,2,codes.beta.discount]}', obj);
    });
    it('resolves “if”/“else” conditions', function() {
      data.dynamic = 0;
      egal("if (codes != null) {\n  increment(10);\n}\nelse {\n  increment(20);\n};\ndynamic;", 10);
      return expect(data.dynamic).toBe(10);
    });
    it('resolves chained “if”/“else if”/“else” conditions', function() {
      var code;
      code = "if (0 === dynamic) {\n  increment(10);\n}\nelse if (1 === dynamic) {\n  increment(19);\n}\nelse {\n  increment(30 - dynamic);\n};\ndynamic;";
      data.dynamic = 0;
      egal(code, 10);
      expect(data.dynamic).toBe(10);
      data.dynamic = 1;
      egal(code, 20);
      expect(data.dynamic).toBe(20);
      data.dynamic = 2;
      egal(code, 30);
      return expect(data.dynamic).toBe(30);
    });
    xit('resolves “for”-loop and multiline statements', function() {
      return compare("for (clothes) {\n  p = price;\n  q = quantity;\n  p * q;\n}", [116, 121.14000000000001, 387.75, 11.97]);
    });
    it('resolves early terminating conditionals', function() {
      data.dynamic = 0;
      egal("increment(10) || increment(20); dynamic;", 10);
      expect(data.dynamic).toBe(10);
      data.dynamic = 0;
      egal("increment(0) && increment(20); dynamic;", 0);
      expect(data.dynamic).toBe(0);
      data.dynamic = 0;
      egal("false ? increment(10) : increment(20); dynamic;", 20);
      return expect(data.dynamic).toBe(20);
    });
    it('resolves all mathematical assignments', function() {
      return egal("variable = 40 + 5;  /* = 45 */\nvariable *= 10;     /* = 450 */\nvariable /= 5;      /* = 90 */\nvariable -= 40;     /* = 50 */\nvariable += 15;     /* = 65 */\nvariable++    ;     /* = 66 */\nvariable--    ;     /* = 65 */\n++variable    ;     /* = 66 */\n--variable    ;     /* = 65 */", 65);
    });
    it('resolves context assignments', function() {
      return egal("variable = codes;\nvariable.alpha;", data.codes.alpha);
    });
    return it('resolves local variable and context property having the same name', function() {
      return egal("favoriteChild = 'Kris';\nfavoriteChild + $$favoriteChild;", "Krispat");
    });
  });

}).call(this);

/*
//@ sourceMappingURL=GoateeScriptTestSpec.map
*/
