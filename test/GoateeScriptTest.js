// Generated by CoffeeScript 1.6.3
/*
© Copyright 2013 Stephan Jorek <stephan.jorek@gmail.com>
© Copyright 2012 Kris Nye <krisnye@gmail.com>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/


(function() {
  var Benchmark, evaluate, isArray, parse, render, _ref;

  Benchmark = require('benchmark');

  _ref = require('../lib/GoateeScript').GoateeScript, evaluate = _ref.evaluate, parse = _ref.parse, render = _ref.render;

  isArray = require('../lib/GoateeScript/Utility').Utility.isArray;

  exports.GoateeScriptTest = (function() {
    return exports.GoateeScriptTest = {
      setUp: function(callback) {
        var self, sum;
        self = this;
        if (this.data == null) {
          this.data = {
            clothes: [
              {
                name: 'Shirt',
                sizes: ['S', 'M', 'L'],
                price: 14.50,
                quantity: 8
              }, {
                name: 'Pants',
                sizes: [29, 30, 31, 32],
                price: 20.19,
                quantity: 6
              }, {
                name: 'Shoes',
                sizes: [8, 9, 10],
                price: 25.85,
                quantity: 15
              }, {
                name: 'Ties',
                sizes: [2],
                price: 3.99,
                quantity: 3
              }
            ],
            codes: {
              alpha: {
                discount: 10,
                items: 4
              },
              beta: {
                discount: 20,
                items: 2
              },
              charlie: {
                discount: 30,
                items: 1
              }
            },
            favoriteChild: 'pat',
            children: {
              pat: {
                name: 'pat',
                age: 28,
                children: {
                  jay: {
                    name: 'jay',
                    age: 4
                  },
                  bob: {
                    name: 'bob',
                    age: 8
                  }
                }
              },
              skip: {
                name: 'skip',
                age: 30,
                children: {
                  joe: {
                    name: 'joe',
                    age: 7
                  }
                }
              }
            },
            dynamic: 0,
            increment: function(count) {
              return this.dynamic += count;
            },
            min: function(a, b) {
              if (b == null) {
                return a;
              }
              if (a == null) {
                return b;
              }
              if (a.valueOf() <= b.valueOf()) {
                return a;
              } else {
                return b;
              }
            },
            max: function(a, b) {
              if (b == null) {
                return a;
              }
              if (a == null) {
                return b;
              }
              if (a.valueOf() >= b.valueOf()) {
                return a;
              } else {
                return b;
              }
            },
            sum: sum = function(a) {
              var item, number, total, _i, _len;
              if (a == null) {
                return 0;
              }
              if (isArray(a)) {
                total = 0;
                for (_i = 0, _len = a.length; _i < _len; _i++) {
                  item = a[_i];
                  total += sum(item);
                }
                return total;
              }
              number = Number(a);
              if (isNaN(number)) {
                return 0;
              } else {
                return number;
              }
            }
          };
        }
        if (this.benchmark == null) {
          this.benchmark = new Benchmark.Suite;
        }
        if (this.check == null) {
          this.check = function(test, code, expected) {
            var expression;
            expression = parse(code);
            return test.equal(JSON.stringify(expected), JSON.stringify(expression.evaluate(self.data)));
          };
        }
        return callback();
      },
      'can add two positive numbers': function(test) {
        test.equal(evaluate('1+1'), 2);
        return test.done();
      },
      'benchmark of adding two positive numbers': function(test) {
        return test.done();
      },
      'expression vectors': function(test) {
        test.equal(parse('5').vector, false);
        test.equal(parse('5+2').vector, false);
        test.equal(parse('func(alpha)').vector, false);
        return test.done();
      },
      'expression with one or multiple collapsing “undefined” values': function(test) {
        var s, statements, _i, _len;
        statements = ['', ';;;;', ';/* nix */;'];
        for (_i = 0, _len = statements.length; _i < _len; _i++) {
          s = statements[_i];
          test.ok(evaluate(s) === void 0, "“" + s + "” failed to evaluate to “undefined”");
          test.ok(render(s) === '', "“" + s + "” failed to render to “''”");
        }
        return test.done();
      },
      'expression with one or multiple “null” values': function(test) {
        var s, statements, _i, _len;
        statements = ['null', 'null;null', 'null;null;null'];
        for (_i = 0, _len = statements.length; _i < _len; _i++) {
          s = statements[_i];
          test.ok(evaluate(s) === null, "“" + s + "” failed to evaluate to “null”");
          test.ok(render(s) === s, "“" + s + "” failed to render to “'null'”");
        }
        return test.done();
      },
      'expression with multiple “null” and collapsing “undefined” values': function(test) {
        var s, statements, _i, _len;
        statements = [';null;null;;', 'null;;null;;', 'null;/*;null;*/null;;'];
        for (_i = 0, _len = statements.length; _i < _len; _i++) {
          s = statements[_i];
          test.ok(evaluate(s) === null, "“" + s + "” failed to evaluate to “null”");
          test.ok(render(s) === 'null;null', "“" + s + "” failed to render to “'null;null'”");
        }
        return test.done();
      },
      'expression with scalar values (primitives)': function(test) {
        this.check(test, "5", 5);
        this.check(test, "'5'", '5');
        this.check(test, "1 + 2", 3);
        this.check(test, "1 + 2 * 3", 7);
        this.check(test, "'a' + 'b'", 'ab');
        return test.done();
      },
      'expression with object access': function(test) {
        this.check(test, "codes", this.data.codes);
        this.check(test, "codes.alpha", this.data.codes.alpha);
        this.check(test, "codes.alpha.discount", this.data.codes.alpha.discount);
        this.check(test, "codes.discount", void 0);
        return test.done();
      },
      'expression with array access': function(test) {
        this.check(test, "clothes[-1]", this.data.clothes[this.data.clothes.length - 1]);
        return test.done();
      },
      'expression with scope access': function(test) {
        this.check(test, "children", this.data.children);
        this.check(test, "children.children", void 0);
        return test.done();
      },
      'expression with children access': function(test) {
        return test.done();
      },
      'expression with object access predicates': function(test) {
        return test.done();
      },
      'expression with constructor access': function(test) {
        this.check(test, "codes.constructor", void 0);
        return test.done();
      },
      'expression with prototype access': function(test) {
        this.check(test, "codes.constructor", void 0);
        this.check(test, "codes + ''", this.data.codes.toString());
        this.check(test, "codes.toString()", this.data.codes.toString());
        this.check(test, "codes.valueOf()", this.data.codes.valueOf());
        this.check(test, "clothes.length", 4);
        return test.done();
      },
      'expression with array access predicates': function(test) {
        return test.done();
      },
      'expression with context references': function(test) {
        this.check(test, "@", this.data);
        this.check(test, "$$", this.data);
        this.check(test, "test = 1 ; _$", {
          test: 1
        });
        this.check(test, "children[favoriteChild]", this.data.children.pat);
        return test.done();
      },
      'expression with context specific operation using .(local paths) syntax.': function(test) {
        return test.done();
      },
      'expression with context reference function calls': function(test) {
        this.check(test, "min(12, 20)", 12);
        this.check(test, "max(30, 50)", 50);
        return test.done();
      },
      'expression with object and array literals': function(test) {
        var ary, obj;
        obj = {
          alpha: this.data.codes.alpha.discount,
          beta: 2
        };
        ary = [3, 2, this.data.codes.beta.discount];
        this.check(test, '{alpha:codes.alpha.discount,"beta":2}', obj);
        this.check(test, '[3,2,codes.beta.discount]', ary);
        obj.charlie = ary;
        this.check(test, '{alpha:codes.alpha.discount,"beta":2,charlie:[3,2,codes.beta.discount]}', obj);
        return test.done();
      },
      'expression with “if”/“else” condition and multiline statements': function(test) {
        this.check(test, "if (codes != null) {\n  increment(10);\n}\nelse {\n  increment(20);\n};\ndynamic;", 10);
        return test.done();
      },
      'expression with “for”-loop and multiline statements': function(test) {
        return test.done();
      },
      'expression with early terminating conditionals': function(test) {
        this.data.dynamic = 0;
        this.check(test, "increment(10) || increment(20); dynamic;", 10);
        this.data.dynamic = 0;
        this.check(test, "increment(0) && increment(20); dynamic;", 0);
        this.data.dynamic = 0;
        this.check(test, "false ? increment(10) : increment(20); dynamic;", 20);
        return test.done();
      },
      'expression with all mathematical assignments': function(test) {
        this.check(test, "variable = 40 + 5;  /* = 45 */\nvariable *= 10;     /* = 450 */\nvariable /= 5;      /* = 90 */\nvariable -= 40;     /* = 50 */\nvariable += 15;     /* = 65 */\nvariable++    ;     /* = 66 */\nvariable--    ;     /* = 65 */\n++variable    ;     /* = 66 */\n--variable    ;     /* = 65 */", 65);
        return test.done();
      },
      'expression with context assignments': function(test) {
        this.check(test, "variable = codes;\nvariable.alpha;", this.data.codes.alpha);
        return test.done();
      },
      'expression with local variable and context property having the same name': function(test) {
        this.check(test, "favoriteChild = 'Kris';\nfavoriteChild + $$favoriteChild;", "Krispat");
        return test.done();
      }
    };
  })();

}).call(this);

/*
//@ sourceMappingURL=GoateeScriptTest.map
*/
