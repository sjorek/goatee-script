startSymbol: "Script"
bnf:
  Script: [
    [
      "End"
      "return yy.goatee.create('scalar', [void 0]);"
    ]
    [
      "Statements End"
      "return $1;"
    ]
    [
      "Seperator Statements End"
      "return $2;"
    ]
  ]
  Statements: [
    [
      "Statement"
      "$$ = $1;"
      null
    ]
    [
      "Statements Seperator Statement"
      '''
        $$ = (function () {
                  if ($1.operator.name === 'block') {
                    $1.parameters.push($3);
                    return $1;
                  } else {
                    return yy.goatee.create('block', [$1, $3]);
                  }
                }.call(this));
      '''
      null
    ]
  ]
  End: [
    [
      "EOF"
      "return;"
    ]
    [
      "Seperator EOF"
      "return;"
    ]
  ]
  Identifier: [
    [
      "THIS"
      "$$ = $1;"
      null
    ]
    [
      "REFERENCE"
      "$$ = $1;"
      null
    ]
  ]
  Seperator: [
    [
      ";"
      "return;"
    ]
    [
      "Seperator ;"
      "return;"
    ]
  ]
  Statement: [
    [
      "Conditional"
      "$$ = $1;"
      null
    ]
    [
      "Expression"
      "$$ = $1;"
      null
    ]
  ]
  Parameters: [
    [
      ""
      "$$ = [];"
      null
    ]
    [
      "Expression"
      "$$ = [$1];"
      null
    ]
    [
      "Parameters , Expression"
      "$$ = $1.concat($3);"
      null
    ]
  ]
  Key: [
    [
      "Scalar"
      "$$ = $1;"
      null
    ]
    [
      "Primitive"
      "$$ = $1;"
      null
    ]
    [
      "Property"
      "$$ = $1;"
      null
    ]
  ]
  KeyValues: [
    [
      "Key : Expression"
      "$$ = [$1, $3];"
      null
    ]
    [
      "KeyValues , KeyValues"
      "$$ = $1.concat($3);"
      null
    ]
  ]
  Object: [
    [
      "{ }"
      "$$ = yy.goatee.create('object', []);"
      null
    ]
    [
      "{ KeyValues }"
      "$$ = yy.goatee.create('object', $2);"
      null
    ]
  ]
  Elements: [
    [
      ""
      "$$ = [];"
      null
    ]
    [
      "Expression"
      "$$ = [$1];"
      null
    ]
    [
      "Elements , Elements"
      "$$ = $1.concat($3.length === 0 ? [void 0] : $3);"
      null
    ]
  ]
  Array: [
    [
      "[ Elements ]"
      "$$ = yy.goatee.create('array', $2);"
      null
    ]
  ]
  Block: [
    [
      "{ Seperator }"
      "$$ = yy.goatee.create('scalar', [void 0]);"
      null
    ]
    [
      "{ Statements }"
      "$$ = $2;"
      null
    ]
    [
      "{ Statements Seperator }"
      "$$ = $2;"
      null
    ]
  ]
  If: [
    [
      "IF Group Block"
      "$$ = yy.goatee.create('if', [$2, $3]);"
      null
    ]
    [
      "If ELSE IF Group Block"
      "$$ = yy.goatee.addElse($1, yy.goatee.create('if', [$4, $5]));"
      null
    ]
  ]
  Conditional: [
    [
      "If"
      "$$ = $1;"
      null
    ]
    [
      "If ELSE Block"
      "$$ = yy.goatee.addElse($1, $3);"
      null
    ]
  ]
  IncDec: [
    [
      "++"
      "$$ = $1;"
      null
    ]
    [
      "--"
      "$$ = $1;"
      null
    ]
  ]
  Assignment: [
    [
      "IncDec Identifier"
      "$$ = yy.goatee.create($1, [$2, 0]);"
      null
    ]
    [
      "Identifier IncDec"
      "$$ = yy.goatee.create($2, [$1, 1]);"
      null
    ]
    [
      "REFERENCE -= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE += Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE *= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE /= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE %= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE ^= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE >>>= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE >>= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE <<= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE &= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE |= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "REFERENCE = Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
  ]
  Scalar: [
    [
      "NUMBER"
      "$$ = Number($1);"
      null
    ]
    [
      "+ NUMBER"
      "$$ = +Number($2);"
      null
    ]
    [
      "- NUMBER"
      "$$ = -Number($2);"
      null
    ]
    [
      "STRING"
      "$$ = yy.goatee.escape($1);"
      null
    ]
  ]
  Primitive: [
    [
      "NULL"
      "$$ = null;"
      null
    ]
    [
      "TRUE"
      "$$ = true;"
      null
    ]
    [
      "FALSE"
      "$$ = false;"
      null
    ]
  ]
  Operation: [
    [
      "Expression * Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression / Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression % Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression + Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression - Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "! Expression"
      "$$ = yy.goatee.create('!', [$2]);"
      null
    ]
    [
      "Expression <= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression >= Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression < Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression > Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression === Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression !== Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression == Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression != Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression && Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression || Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "~ Expression"
      "$$ = yy.goatee.create('~', [$2]);"
      null
    ]
    [
      "Expression >>> Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression >> Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression << Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression & Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression | Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
    [
      "Expression ^ Expression"
      "$$ = yy.goatee.create($2, [$1, $3]);"
      null
    ]
  ]
  Literal: [
    [
      "Object"
      "$$ = $1;"
      null
    ]
    [
      "Array"
      "$$ = $1;"
      null
    ]
    [
      "Primitive"
      "$$ = yy.goatee.create('scalar', [$1]);"
      null
    ]
    [
      "Scalar"
      "$$ = yy.goatee.create('scalar', [$1]);"
      null
    ]
  ]
  Scope: [
    [
      "CONTEXT"
      "$$ = yy.goatee.create('context', [$1]);"
      null
    ]
    [
      "SELF"
      "$$ = yy.goatee.create('context', [$1]);"
      null
    ]
  ]
  Reference: [
    [
      "Identifier"
      "$$ = yy.goatee.create('reference', [$1]);"
      null
    ]
    [
      "Scope Property"
      "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$2])]);"
      null
    ]
    [
      "Scope"
      "$$ = $1;"
      null
    ]
  ]
  Property: [
    [
      "CONSTRUCTOR"
      "$$ = $1;"
      null
    ]
    [
      "PROTOTYPE"
      "$$ = $1;"
      null
    ]
    [
      "THIS"
      "$$ = $1;"
      null
    ]
    [
      "IF"
      "$$ = $1;"
      null
    ]
    [
      "THEN"
      "$$ = $1;"
      null
    ]
    [
      "ELSE"
      "$$ = $1;"
      null
    ]
    [
      "YIELD"
      "$$ = $1;"
      null
    ]
    [
      "INSTANCEOF"
      "$$ = $1;"
      null
    ]
    [
      "VOID"
      "$$ = $1;"
      null
    ]
    [
      "TYPEOF"
      "$$ = $1;"
      null
    ]
    [
      "NEW"
      "$$ = $1;"
      null
    ]
    [
      "RETURN"
      "$$ = $1;"
      null
    ]
    [
      "CONTEXT"
      "$$ = $1;"
      null
    ]
    [
      "REFERENCE"
      "$$ = $1;"
      null
    ]
    [
      "CONTEXT Property"
      "$$ = $1 + $2;"
      null
    ]
    [
      "CONTEXT Primitive"
      "$$ = $1 + $2;"
      null
    ]
  ]
  Chain: [
    [
      "Expression . Primitive"
      "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$3])]);"
      null
    ]
    [
      "Expression . Property"
      "$$ = yy.goatee.create('.', [$1, yy.goatee.create('property', [$3])]);"
      null
    ]
  ]
  List: [
    [
      "Statement"
      "$$ = $1;"
      null
    ]
    [
      "List , Statement"
      '''
        $$ = (function () {
                  if ($1.operator.name === 'list') {
                    $1.parameters.push($3);
                    return $1;
                  } else {
                    return yy.goatee.create('list', [$1, $3]);
                  }
                }.call(this));
      '''
      null
    ]
  ]
  Group: [
    [
      "( List )"
      "$$ = yy.goatee.create('group', [$2]);"
      null
    ]
  ]
  Expression: [
    [
      "Expression ? Expression : Expression"
      "$$ = yy.goatee.create('?:', [$1, $3, $5]);"
      null
    ]
    [
      "Expression ( Parameters )"
      "$$ = yy.goatee.create('()', [$1].concat($3));"
      null
    ]
    [
      "Expression [ Expression ]"
      "$$ = yy.goatee.create('[]', [$1, $3]);"
      null
    ]
    [
      "Assignment"
      "$$ = $1;"
      null
    ]
    [
      "Reference"
      "$$ = $1;"
      null
    ]
    [
      "Literal"
      "$$ = $1;"
      null
    ]
    [
      "Operation"
      "$$ = $1;"
      null
    ]
    [
      "Chain"
      "$$ = $1;"
      null
    ]
    [
      "Group"
      "$$ = $1;"
      null
    ]
  ]
lex:
  rules: [
    [
      "\\s+"
      "return;"
    ]
    [
      "0x[a-fA-F0-9]+\\b"
      "return 'NUMBER';"
    ]
    [
      "([1-9][0-9]+|[0-9])(\\.[0-9]+)?([eE][-+]?[0-9]+)?\\b"
      "return 'NUMBER';"
    ]
    [
      "null\\b"
      "return 'NULL';"
    ]
    [
      "true\\b"
      "return 'TRUE';"
    ]
    [
      "false\\b"
      "return 'FALSE';"
    ]
    [
      "if\\b"
      "return 'IF';"
    ]
    [
      "then\\b"
      "return 'THEN';"
    ]
    [
      "else\\b"
      "return 'ELSE';"
    ]
    [
      "return\\b"
      "return 'RETURN';"
    ]
    [
      "new\\b"
      "return 'NEW';"
    ]
    [
      "typeof\\b"
      "return 'TYPEOF';"
    ]
    [
      "void\\b"
      "return 'VOID';"
    ]
    [
      "instanceof\\b"
      "return 'INSTANCEOF';"
    ]
    [
      "yield\\b"
      "return 'YIELD';"
    ]
    [
      "constructor\\b"
      "return 'CONSTRUCTOR';"
    ]
    [
      "(__proto__|prototype)\\b"
      "return 'PROTOTYPE';"
    ]
    [
      "this\\b"
      "return 'THIS';"
    ]
    [
      "[@]"
      "return 'SELF';"
    ]
    [
      "[$_][$_0-9]"
      "return 'CONTEXT';"
    ]
    [
      "[$_a-zA-Z]\\w*"
      "return 'REFERENCE';"
    ]
    [
      "\"(\\\\x[a-fA-F0-9]{2}|\\\\u[a-fA-F0-9]{4}|\\\\[^xu]|[^\\\\\"])*\""
      "return 'STRING';"
    ]
    [
      "'(\\\\[\\/'\\\\bfnrt]|\\\\u[a-fA-F0-9]{4}|[^\\\\'])*'"
      "return 'STRING';"
    ]
    [
      "\\/\\*(?:.|[\\r\\n])*?\\*\\/"
      "return;"
    ]
    [
      "\\."
      "return '.';"
    ]
    [
      "\\["
      "return '[';"
    ]
    [
      "\\]"
      "return ']';"
    ]
    [
      "\\("
      "return '(';"
    ]
    [
      "\\)"
      "return ')';"
    ]
    [
      "\\?"
      "return '?';"
    ]
    [
      ":"
      "return ':';"
    ]
    [
      ";"
      "return ';';"
    ]
    [
      ","
      "return ',';"
    ]
    [
      "{"
      "return '{';"
    ]
    [
      "}"
      "return '}';"
    ]
    [
      "-="
      "return '-=';"
    ]
    [
      "\\+="
      "return '+=';"
    ]
    [
      "\\*="
      "return '*=';"
    ]
    [
      "\\/="
      "return '/=';"
    ]
    [
      "%="
      "return '%=';"
    ]
    [
      "--"
      "return '--';"
    ]
    [
      "\\+\\+"
      "return '++';"
    ]
    [
      ">>>="
      "return '>>>=';"
    ]
    [
      ">>="
      "return '>>=';"
    ]
    [
      "<<="
      "return '<<=';"
    ]
    [
      "\\&="
      "return '&=';"
    ]
    [
      "\\|="
      "return '|=';"
    ]
    [
      "\\^="
      "return '^=';"
    ]
    [
      "==="
      "return '===';"
    ]
    [
      "!=="
      "return '!==';"
    ]
    [
      "=="
      "return '==';"
    ]
    [
      "!="
      "return '!=';"
    ]
    [
      "<="
      "return '<=';"
    ]
    [
      ">="
      "return '>=';"
    ]
    [
      "<"
      "return '<';"
    ]
    [
      ">"
      "return '>';"
    ]
    [
      "\\&\\&"
      "return '&&';"
    ]
    [
      "\\|\\|"
      "return '||';"
    ]
    [
      "!"
      "return '!';"
    ]
    [
      "-"
      "return '-';"
    ]
    [
      "\\+"
      "return '+';"
    ]
    [
      "\\*"
      "return '*';"
    ]
    [
      "\\/"
      "return '/';"
    ]
    [
      "\\^"
      "return '^';"
    ]
    [
      "%"
      "return '%';"
    ]
    [
      ">>>"
      "return '>>>';"
    ]
    [
      ">>"
      "return '>>';"
    ]
    [
      "<<"
      "return '<<';"
    ]
    [
      "\\&"
      "return '&';"
    ]
    [
      "\\|"
      "return '|';"
    ]
    [
      "~"
      "return '~';"
    ]
    [
      "="
      "return '=';"
    ]
    [
      "$"
      "return 'EOF';"
    ]
  ]
operators: [
  [
    "left"
    ","
  ]
  [
    "right"
    "="
    "+="
    "-="
    "*="
    "/="
    "%="
    "<<="
    ">>="
    ">>>="
    "&="
    "^="
    "|="
  ]
  [
    "right"
    "YIELD"
  ]
  [
    "right"
    "?"
    ":"
  ]
  [
    "left"
    "||"
  ]
  [
    "left"
    "&&"
  ]
  [
    "left"
    "|"
  ]
  [
    "left"
    "&"
  ]
  [
    "left"
    "^"
  ]
  [
    "left"
    "==="
    "!=="
    "=="
    "!="
  ]
  [
    "left"
    "IN"
    "INSTANCEOF"
  ]
  [
    "left"
    "<="
    ">="
    "<"
    ">"
  ]
  [
    "left"
    ">>>"
    ">>"
    "<<"
  ]
  [
    "left"
    "+"
    "-"
  ]
  [
    "left"
    "*"
    "/"
    "%"
  ]
  [
    "right"
    "!"
    "~"
    "TYPEOF"
    "VOID"
    "DELETE"
  ]
  [
    "nonassoc"
    "++"
    "--"
  ]
  [
    "left"
    "("
    ")"
  ]
  [
    "right"
    "NEW"
  ]
  [
    "left"
    "."
    "["
    "]"
  ]
]
tokens: "EOF THIS REFERENCE ;  , : { } [ ] IF ELSE ++ -- -= += *= /= %= ^= >>>= >>= <<= &= |= = NUMBER + - STRING NULL TRUE FALSE * / % ! <= >= < > === !== == != && || ~ >>> >> << & | ^ CONTEXT SELF CONSTRUCTOR PROTOTYPE THEN YIELD INSTANCEOF VOID TYPEOF NEW RETURN . ( ) ?"
yy: {}